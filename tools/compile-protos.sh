#!/bin/bash
set -euo pipefail

REPO_ROOT="$(realpath "$(dirname "${BASH_SOURCE[0]}")/..")"
BIN_DIR="${REPO_ROOT}/build/bin"
API_DIR="${REPO_ROOT}/api"

# https://github.com/protocolbuffers/protobuf/releases
PROTOC_RELEASE=3.11.4
PROTO_ZIP_RELEASE_MD5_LINUX=7c0babfc7d2ae4eff6ce3e47c2de90c2
PROTO_ZIP_RELEASE_MD5_OSX=58c8716eabdbc1259d14880ace6e719a

PROTOS=()
PROTO_DIRS=()

main() {
  prepare_build_environment
  discover_protos

  grpc_gateway_include_path="$(modpath github.com/grpc-ecosystem/grpc-gateway)/third_party/googleapis"
  pg_validate_include_path="$(modpath github.com/envoyproxy/protoc-gen-validate)"
  pg_swagger_include_path="$(modpath github.com/grpc-ecosystem/grpc-gateway)"

  for proto_dir in "${PROTO_DIRS[@]}"; do
    echo "${proto_dir}"
    "${PROTOC_BIN}" \
      -I"${PROTOC_INCLUDE_DIR}" -I"${API_DIR}" \
      -I"${grpc_gateway_include_path}" -I"${pg_validate_include_path}" -I"${pg_swagger_include_path}" \
      --swagger_out=logtostderr=true,allow_merge=true,include_package_in_tags=true,allow_repeated_fields_in_body=true,json_names_for_fields=true,merge_file_name=pb:"${proto_dir}" \
      --plugin=protoc-gen-swagger="${GOBIN}/protoc-gen-swagger" \
      "${proto_dir}"/*.proto

    yamlout="${proto_dir}"/pb.swagger.yaml
    mv "${proto_dir}"/pb.swagger.json "${yamlout}"

    # Simplify the swagger so it's more human readable and more readable in the `swagger serve` redoc.
    "${GOBIN}/swagger" flatten -o "${yamlout}" \
      --with-flatten=expand \
      --with-flatten=remove-unused \
      --with-flatten=noverbose \
      --format=yaml \
      "${yamlout}"

    # Strip the proto name from the title since it doesn't make sense after merge and prepend a header.
    yaml=$(sed 's/\(  title: .*\)\/.*\.proto/\1/' "${yamlout}")
    echo -e "# Generated by compile-protos.sh. DO NOT EDIT.\n${yaml}" > "${yamlout}"
  done
}

discover_protos() {
  while IFS= read -r -d '' proto; do
    PROTOS+=("${proto}")
  done <  <(find "${API_DIR}" -name '*.proto' -print0)

  while IFS= read -r -d '' proto_dirs; do
    PROTO_DIRS+=("${proto_dirs}")
  done <  <(find "${API_DIR}" -name '*.proto' -exec dirname {} \; | tr '\n' '\0' | sort -zu)
}

prepare_build_environment() {
  mkdir -p "${BIN_DIR}"

  fetch_plugins
  install_protoc
}

# Get the directory that the go module is stored in and ensure that it's the correct version.
modpath() {
  set -e
  go mod download "${1}"
  go list -f "{{ .Dir }}" -m "${1}"
}

fetch_plugins() {
    export GOBIN="${BIN_DIR}" 
    mkdir -p "${GOBIN}"

    # depedencies are pinned in go.mod for plugins
    cd "${REPO_ROOT}/tools/protoc-plugins-go"
    go install \
      github.com/bufbuild/buf/cmd/protoc-gen-buf-check-lint \
      github.com/envoyproxy/protoc-gen-validate \
      github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger \
      github.com/go-swagger/go-swagger/cmd/swagger
}

install_protoc() {
  export PROTOC_BIN="${GOBIN}/protoc-v${PROTOC_RELEASE}"
  export PROTOC_INCLUDE_DIR="${GOBIN}/protoc-v${PROTOC_RELEASE}-include"

  if [[ ! -f "${PROTOC_BIN}" || ! -d "${PROTOC_INCLUDE_DIR}" ]]; then
    echo "info: Downloading protoc-v${PROTOC_RELEASE} to build environment"

    proto_arch=x86_64
    case "${OSTYPE}" in
      "darwin"*) proto_os="osx"; proto_md5="${PROTO_ZIP_RELEASE_MD5_OSX}" ;;
      "linux"*) proto_os="linux"; proto_md5="${PROTO_ZIP_RELEASE_MD5_LINUX}" ;;
      *) echo "error: Unsupported OS '${OSTYPE}' for protoc install" && exit 1 ;;
    esac

    proto_zip_out="/tmp/protoc-${PROTOC_RELEASE}.zip"
    curl -sSL -o "${proto_zip_out}" \
      "https://github.com/protocolbuffers/protobuf/releases/download/v${PROTOC_RELEASE}/protoc-${PROTOC_RELEASE}-${proto_os}-${proto_arch}.zip"
    echo ${proto_md5} ${proto_zip_out} | md5sum --check --quiet -

    proto_dir_out="/tmp/proto-${PROTOC_RELEASE}"
    mkdir -p "${proto_dir_out}"
    unzip -q -o "${proto_zip_out}" -d "${proto_dir_out}"

    if [[ ! -f ${PROTOC_BIN} ]]; then
      mv "${proto_dir_out}"/bin/protoc "${PROTOC_BIN}"
    fi

    if [[ ! -d "${PROTOC_INCLUDE_DIR}" ]]; then
      mv "${proto_dir_out}"/include "${PROTOC_INCLUDE_DIR}"
    fi
  fi
}

main "$@"
